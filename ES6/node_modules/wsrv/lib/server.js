'use strict';

const path = require('path');
const Hapi = require('hapi');
const Inert = require('inert');
const Good = require('good');
const opn = require('opn');
const fs = require('fs');
const tinylr = require('tiny-lr');
const chokidar = require('chokidar');
const _ = require('lodash');

class Server {
    getDefaultSettings () {
        return {
            host: 'localhost',
            dir: process.cwd(),
            spa: false,
            open: false,
            openUrl: null,
            livereload: false,
            lrPort: 35729,
            watch: [],
            verbose: false,
            silent: false,
            ext: []
        };
    }

    constructor (options) {
        let config = this.getDefaultSettings();
        if (options) {
            _.merge(config, options);
        }
        this.config = config;
        this.config.dir = path.resolve(this.config.dir);

        // Create a server with a host and port
        const server = new Hapi.Server({
            connections: {
                routes: {
                    // cors: true,
                    files: {
                        relativeTo: this.config.dir
                    }
                }
            }
        });

        server.connection({
            host: config.host,
            port: config.port
        });

        server.register(Inert, () => {});
        server.register({
            register: require('h2o2')
        });

        if (config.livereload) {
            server.route({
                method: 'GET',
                path: '/index.html',
                handler: (request, reply) => {
                    return this.serveLiveReloadedIndex(request, reply);
                }
            });
        }

        server.route({
            method: 'GET',
            path: '/{param*}',
            handler: {
                directory: {
                    path: '.',
                    listing: true,
                    index: true
                }
            }
        });

        if (config.proxy) {
            this.log('Setting up proxy');
            this.setupProxy(server, config.proxy);
        }

        server.ext('onPreResponse', (request, reply) => {
            const response = request.response;

            if (config.livereload &&
                !response.isBoom &&
                response.source &&
                response.source.path) {
                const fileName = path.basename(response.source.path);
                if (fileName === 'index.html') {
                    return this.serveLiveReloadedIndex(request, reply);
                }
            }

            // SPA mode
            if (config.spa &&
                response.isBoom &&
                response.output.statusCode === 404) {
                if (config.livereload) {
                    return this.serveLiveReloadedIndex(request, reply);
                } else {
                    return reply.file('index.html');
                }
            }

            if (typeof this.config.onResHeaders === 'function') {
                this.config.onResHeaders(response.headers);
            }

            return reply.continue();
        });

        let logOptions = {};
        if (config.verbose) {
            logOptions = {
                reporters: {
                    console: [{
                        module: 'good-squeeze',
                        name: 'Squeeze',
                        args: [{
                            response: '*',
                            log: '*'
                        }]
                    }, {
                        module: 'good-console'
                    }, 'stdout']
                }
            };
        }

        this.logOptions = logOptions;
        this.server = server;

        if (config.ext && config.ext.length > 0) {
            this.setupPlugins(config.ext);
        }
    }

    setupPlugins (ext, cb) {
        if (ext && ext.length > 0) {
            const plugins = ext.map(plugin => {
                return {
                    register: require(path.resolve(this.config.dir, plugin)),
                    options: {}
                };
            });
            this.server.register(
                plugins,
                (err) => {
                    if (err) {
                        throw err;
                    }
                }
            );
        }
    }

    setupProxy (server, opts) {
        const defaultProxySettings = {
            passThrough: true,
            redirects: 9999,
            xforward: true
        };

        Object.keys(opts).forEach(path => {
            const routeOpts = opts[path];
            const methods = routeOpts.methods || [ 'GET', 'POST', 'PUT', 'DELETE' ];
            const proxy = Object.assign({}, defaultProxySettings, routeOpts.options);

            methods.forEach(routeMethod => {
                let route = {
                    method: routeMethod.toUpperCase(),
                    path: path,
                    handler: {
                        proxy: proxy
                    }
                };
                this.log(route);
                server.route(route);
            });
        });
    }

    serveLiveReloadedIndex (request, reply) {
        const fileName = path.join(this.config.dir, 'index.html');
        fs.readFile(fileName, 'utf8', function (err, data) {
            if (err) {
                this.log(err);
                return reply(err, null);
            }
            let body = data;
            let snippet = `
                <script>document.write(
                    '<script src="http://'
                    + (location.host || 'localhost').split(':')[0]
                    + ':35729/livereload.js?snipver=1"></'
                    + 'script>')
                </script>
            `;
            body = body.replace(/<\/body>/, function (w) {
                return snippet + w;
            });
            reply(body);
        });
    }

    openUrl (url) {
        if (url) {
            opn(url);
        }
    }

    start () {
        return new Promise((resolve, reject) => {
            this.log(`Serving directory: ${this.config.dir}`);

            this.server.register({
                register: Good,
                options: this.logOptions
            }, (err) => {
                if (err) {
                    // something bad happened loading the plugin
                    return reject(err);
                }

                this.server.start((err) => {
                    if (err) {
                        return reject(err);
                    }

                    if (this.config && !this.config.silent) {
                        console.log(`Server running at: ${this.server.info.uri}`);
                    }

                    let url = null;

                    if (this.config.open) {
                        url = this.server.info.uri;
                    }

                    if (this.config.openUrl) {
                        url = this.config.openUrl;
                    }

                    if (url) {
                        if (!this.config.silent) {
                            console.log(`Opening start page: ${url}`);
                        }
                        this.openUrl(url);
                    }

                    resolve(true);
                });
            });

            if (this.config.livereload) {
                this.lrServer = tinylr();
                this.lrServer.listen(this.config.lrPort, () => {
                    this.log(`Live reload listening on ${this.config.lrPort} port`);
                });

                const watcher = chokidar.watch('file, dir, glob, or array', {
                    ignored: [/node_modules/, /bower_components/],
                    persistent: true
                });
                this.setupWatcher(watcher);
                watcher.add(this.config.dir);

                if (this.config.watch && this.config.watch.length > 0) {
                    // setup additonal watcher with no 'ignored' presets
                    const extraWatcher = chokidar.watch('file, dir, glob, or array', {
                        persistent: true
                    });

                    this.setupWatcher(extraWatcher);

                    for (let i = 0; i < this.config.watch.length; i++) {
                        extraWatcher.add(this.config.watch[i]);
                    }
                }
            }
        });
    }

    stop () {
        this.server.stop();

        if (this.lrServer) {
            this.lrServer.close();
        }
    }

    setupWatcher (watcher) {
        watcher
            .on('add', path => this.log(`File ${path} has been added`))
            .on('change', path => this.log(`File ${path} has been changed`))
            .on('unlink', path => this.log(`File ${path} has been removed`));

        watcher.on('change', _.throttle(path => {
            tinylr.changed(path);
        }, 200));
    }

    log (message) {
        if (this.config &&
            !this.config.silent &&
            this.config.verbose &&
            message) {
            console.log(message);
            return true;
        }
        return false;
    }
};

module.exports = Server;
