#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const Server = require('../lib/server');

const argv = require('yargs')
    .usage('wsrv [path] [options]')
    // version
    .alias('v', 'version').version().describe('v', 'Shows version information.')
    .option('i', {
        alias: 'init',
        describe: 'Creates default configuration file.',
        type: 'boolean',
        default: false
    })
    .option('a', {
        alias: 'address',
        describe: 'Address to use.',
        type: 'string'
    })
    .option('p', {
        alias: 'port',
        describe: 'Port to use.',
        type: 'number'
    })
    .option('d', {
        alias: 'dir',
        describe: 'Sets working directory.',
        type: 'string'
    })
    .option('s', {
        alias: 'spa',
        describe: 'Enables SPA (Single Page Application) support.',
        type: 'boolean',
        default: false
    })
    .option('o', {
        alias: 'open',
        describe: 'Opens browser window after starting the server.',
        type: 'boolean',
        default: false
    })
    .option('O', {
        alias: 'open-url',
        describe: 'Opens browser window at specific url after starting the server.',
        type: 'string'
    })
    .option('l', {
        alias: 'livereload',
        describe: 'Enable live reload support.',
        type: 'boolean',
        default: false
    })
    .option('w', {
        alias: 'watch',
        describe: 'Additional files to watch for live reload.',
        type: 'array',
        default: []
    })
    .option('V', {
        alias: 'verbose',
        describe: 'Enables verbose output.',
        type: 'boolean',
        default: false
    })
    .option('c', {
        alias: 'config',
        describe: 'Path to custom configuration file.',
        type: 'string'
    })
    .option('x', {
        alias: 'ext',
        describe: 'Server extensions',
        type: 'array',
        default: []
    })
    .option('h', {
        alias: 'host',
        describe: 'Host address',
        type: 'string'
    })
    .argv;

// command line arguments
let commandLineArgs = {
    init: argv.i,
    host: argv.host || argv.address || '0.0.0.0',
    port: argv.p,
    dir: path.resolve(argv._[0] || argv.d || process.cwd()),
    spa: argv.s,
    open: argv.o,
    openUrl: argv.O,
    livereload: argv.l,
    watch: argv.w,
    lrPort: 35729,
    verbose: argv.verbose,
    ext: argv.x
};

if (argv.init) {
    try {
        console.log('Generating config file...');
        const targetFile = path.join(commandLineArgs.dir, 'wsrv-config.json');
        const config = {
            dir: './dist',
            host: '0.0.0.0',
            port: 3000,
            spa: true
        };
        const data = JSON.stringify(config, null, 4);
        fs.writeFileSync(targetFile, data);
    } catch (err) {
        console.log(err);
    }
    process.exit();
}

const verbose = argv.verbose;

// External configuration (have highest priority)
const configName = argv.config || 'wsrv-config';
const configPath = path.resolve(configName);
let config = {};

const log = function (message) {
    if (verbose && message) {
        console.log(message);
    }
};

try {
    config = require(configPath);
    if (typeof config === 'function') {
        config = config();
    }
} catch (err) {
    if (err.code && err.code === 'MODULE_NOT_FOUND') {
        log('Cound not find configuration file.');
    } else {
        throw (err);
    }
}

config = Object.assign({}, commandLineArgs, config);
log(`Using configuration: ${configPath}`);

const server = new Server(config);
server.start();
